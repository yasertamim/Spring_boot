spring boot application

The structure of our application consist of three layers:
API layer (studentController): where we will make the main requests (Get, Put, Post, Delete)
Service layer(studentService): this layer is mainly for business logic
Data access layer(studentRepository): this layer is responsible for connecting to database
----------------------------Notes-------------------------------------------
	<dependency>-->
<!--			<groupId>org.springframework.boot</groupId>-->
<!--			<artifactId>spring-boot-starter-data-jpa</artifactId>-->
<!--		</dependency>-->

this part of dependencies in pom.xml file are used when we connect to database
this dependencies allows us to make tables in database
.......................................
// here we define the path to database named student
spring.datasource.url=jdpc:postgresql://localhost:5432/student
spring.datasource.name=
spring.datasource.password=
// this gives a clean state when we run the application
spring.jpa.hibernate.ddl-auto= create-drop
spring.jpa.show-sql=true
// define the dialect as a postgres
spring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgresQLDialect
spring.jpa.properties.hibernate.format_sql = true

these properties are added in application.properties file

.......................................
@Transactional
by using this annotation it means that you dont have to implement any JPA query
so you can use the setters from your entity that you get back to check whether you can or cant update
and then you can use the setters to automatically update the entity in your database

---------------------------------------------------------------------------------

step1:
i have created a package named student in order to include all services and models related to the
application
- student class that describes a student object
- studentController to manage api endpoints
- studentService class that will be used in studentController in order to communicate
between the api layer and data access layer
- Data access layer: we create an interface called StudentRepository
(we have to use this interface inside studentService class using dependency injection.
)
- last create StudentConfig class in order to add students to database

step2:
map Student class to database by using these annotations
@Entity
@Table

step3:  Testing

